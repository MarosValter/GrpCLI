syntax = "proto3";
package descriptors;

option csharp_namespace = "ThermoFisher.DataPlatform.DsPersistenceApi.Services";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

/*
 * Data Exploration Platform (DEP) Health Monitor (HM) gRPC API entry point.
 */
service HmProvider {
  // Yields collection of HM parameters known to DEP
  rpc GetParameters (google.protobuf.Empty) returns (stream Parameter);
  // Yields collection of devices (microscopes) known to DEP
  rpc GetDevices (google.protobuf.Empty) returns (stream Device);
  // Yields collection of HM events that match given request, sorted by event date, descendingly
  rpc GetData (DataRequest) returns (stream Data);
}

// REQUESTS

/*
 * Requests Health Monitor (HM) events associated with given parameters.
 */
message DataRequest {
  // Device (microscope) whose HM data is to be retrieved
  Device device = 1;
  // Collection of parameters to be queried for HM data
  repeated Parameter parameters = 2;
  // (optional) Opening date of the interval whose data is to be found, exclusive
  optional google.protobuf.Timestamp fromDate = 3;
  // (optional) Closing date of the interval whose data is to be found, inclusive
  optional google.protobuf.Timestamp toDate = 4;
  // (optional) Maximum number of events (per parameter) to be included in the response.
  optional int32 limit = 5;
}

// RESPONSES

/*
 * Representation of Health Monitor (HM) parameter.
 */
message Parameter {
  int32 correlationId = 1;	// Transient identifier, unique withing scope of a request/response
  string moduleType = 2;	// Event module type identifying name, e.g. 'Imaging'
  string componentType = 3;	// Event component type identifying name, e.g. 'PIA4'
  string eventType = 4;		// Event type identifying name, e.g. 'CartridgeLoadsEvent'
  string propertyType = 5;	// Event property type identifying name, e.g. 'LoadCartridgeCounter'
}

/*
 * Representation of a device (microscope).
 */
message Device {
  // Device identifier aka DeviceGuid, e.g. 'cb82479b-2ebe-4ed5-9166-b6ffc4106e4a'
  string id = 1;
}

/*
 * Representation of Health Monitor (HM) event. Relevant collections are guaranteed 
 * to be sorted by event date, descendingly. This also applies for queries where limit is specified.
 */
message Data {
  // Transient parameter identifier, unique withing scope of a request/response
  int32 correlationId = 1;
  // HM event occurrence time stamp, e.g. '2021-09-01T00:08:01+00:00'
  google.protobuf.Timestamp eventDate = 2;
  // HM event string value, e.g. '-3.13870180037103'
  string eventValue = 3;
}